// <auto-generated />
using System;
using BrewTaskApi.Database.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BrewTaskApi.Migrations
{
    [DbContext(typeof(BrewTaskContext))]
    partial class BrewTaskContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BrewTaskApi.Database.Entities.Subtasks", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ParentTaskId")
                        .HasColumnType("integer");

                    b.Property<bool>("SoftDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("TaskId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ParentTaskId");

                    b.HasIndex("TaskId");

                    b.ToTable("Subtasks");
                });

            modelBuilder.Entity("BrewTaskApi.Database.Entities.Task", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AssigneeId")
                        .HasColumnType("integer");

                    b.Property<int?>("AuthorId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<bool>("SoftDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AssigneeId");

                    b.HasIndex("AuthorId");

                    b.ToTable("Task");
                });

            modelBuilder.Entity("BrewTaskApi.Database.Entities.TaskRelation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("RelationType")
                        .HasColumnType("integer");

                    b.Property<bool>("SoftDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("TaskFromId")
                        .HasColumnType("integer");

                    b.Property<int?>("TaskToId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TaskFromId");

                    b.HasIndex("TaskToId");

                    b.ToTable("TaskRelation");
                });

            modelBuilder.Entity("BrewTaskApi.Database.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("SoftDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateAt = new DateTime(2025, 9, 9, 16, 36, 58, 761, DateTimeKind.Utc).AddTicks(4198),
                            Email = "vino_kurov@inbox.ru",
                            PasswordHash = "$V1$10000$enG65fR/M8auKQvuhdytZoftXHFSYv1wkjlxBwtzZCKYTMp8",
                            SoftDeleted = false,
                            Username = "vinokurov"
                        });
                });

            modelBuilder.Entity("BrewTaskApi.Database.Entities.Subtasks", b =>
                {
                    b.HasOne("BrewTaskApi.Database.Entities.Task", "ParentTask")
                        .WithMany("Subtasks")
                        .HasForeignKey("ParentTaskId");

                    b.HasOne("BrewTaskApi.Database.Entities.Task", "Task")
                        .WithMany()
                        .HasForeignKey("TaskId");

                    b.Navigation("ParentTask");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("BrewTaskApi.Database.Entities.Task", b =>
                {
                    b.HasOne("BrewTaskApi.Database.Entities.User", "Assignee")
                        .WithMany("AssigneeTasks")
                        .HasForeignKey("AssigneeId");

                    b.HasOne("BrewTaskApi.Database.Entities.User", "Author")
                        .WithMany("AuthorTasks")
                        .HasForeignKey("AuthorId");

                    b.Navigation("Assignee");

                    b.Navigation("Author");
                });

            modelBuilder.Entity("BrewTaskApi.Database.Entities.TaskRelation", b =>
                {
                    b.HasOne("BrewTaskApi.Database.Entities.Task", "TaskFrom")
                        .WithMany("RelationTasksFrom")
                        .HasForeignKey("TaskFromId");

                    b.HasOne("BrewTaskApi.Database.Entities.Task", "TaskTo")
                        .WithMany("RelationTasksTo")
                        .HasForeignKey("TaskToId");

                    b.Navigation("TaskFrom");

                    b.Navigation("TaskTo");
                });

            modelBuilder.Entity("BrewTaskApi.Database.Entities.Task", b =>
                {
                    b.Navigation("RelationTasksFrom");

                    b.Navigation("RelationTasksTo");

                    b.Navigation("Subtasks");
                });

            modelBuilder.Entity("BrewTaskApi.Database.Entities.User", b =>
                {
                    b.Navigation("AssigneeTasks");

                    b.Navigation("AuthorTasks");
                });
#pragma warning restore 612, 618
        }
    }
}
